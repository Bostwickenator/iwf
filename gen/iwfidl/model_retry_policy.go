/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// RetryPolicy struct for RetryPolicy
type RetryPolicy struct {
	InitialInterval *float32 `json:"initialInterval,omitempty"`
	BackoffCoefficient *float32 `json:"backoffCoefficient,omitempty"`
	MaximumInterval *float32 `json:"maximumInterval,omitempty"`
	MaximumAttempts *int32 `json:"maximumAttempts,omitempty"`
}

// NewRetryPolicy instantiates a new RetryPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetryPolicy() *RetryPolicy {
	this := RetryPolicy{}
	return &this
}

// NewRetryPolicyWithDefaults instantiates a new RetryPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetryPolicyWithDefaults() *RetryPolicy {
	this := RetryPolicy{}
	return &this
}

// GetInitialInterval returns the InitialInterval field value if set, zero value otherwise.
func (o *RetryPolicy) GetInitialInterval() float32 {
	if o == nil || o.InitialInterval == nil {
		var ret float32
		return ret
	}
	return *o.InitialInterval
}

// GetInitialIntervalOk returns a tuple with the InitialInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetInitialIntervalOk() (*float32, bool) {
	if o == nil || o.InitialInterval == nil {
		return nil, false
	}
	return o.InitialInterval, true
}

// HasInitialInterval returns a boolean if a field has been set.
func (o *RetryPolicy) HasInitialInterval() bool {
	if o != nil && o.InitialInterval != nil {
		return true
	}

	return false
}

// SetInitialInterval gets a reference to the given float32 and assigns it to the InitialInterval field.
func (o *RetryPolicy) SetInitialInterval(v float32) {
	o.InitialInterval = &v
}

// GetBackoffCoefficient returns the BackoffCoefficient field value if set, zero value otherwise.
func (o *RetryPolicy) GetBackoffCoefficient() float32 {
	if o == nil || o.BackoffCoefficient == nil {
		var ret float32
		return ret
	}
	return *o.BackoffCoefficient
}

// GetBackoffCoefficientOk returns a tuple with the BackoffCoefficient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetBackoffCoefficientOk() (*float32, bool) {
	if o == nil || o.BackoffCoefficient == nil {
		return nil, false
	}
	return o.BackoffCoefficient, true
}

// HasBackoffCoefficient returns a boolean if a field has been set.
func (o *RetryPolicy) HasBackoffCoefficient() bool {
	if o != nil && o.BackoffCoefficient != nil {
		return true
	}

	return false
}

// SetBackoffCoefficient gets a reference to the given float32 and assigns it to the BackoffCoefficient field.
func (o *RetryPolicy) SetBackoffCoefficient(v float32) {
	o.BackoffCoefficient = &v
}

// GetMaximumInterval returns the MaximumInterval field value if set, zero value otherwise.
func (o *RetryPolicy) GetMaximumInterval() float32 {
	if o == nil || o.MaximumInterval == nil {
		var ret float32
		return ret
	}
	return *o.MaximumInterval
}

// GetMaximumIntervalOk returns a tuple with the MaximumInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetMaximumIntervalOk() (*float32, bool) {
	if o == nil || o.MaximumInterval == nil {
		return nil, false
	}
	return o.MaximumInterval, true
}

// HasMaximumInterval returns a boolean if a field has been set.
func (o *RetryPolicy) HasMaximumInterval() bool {
	if o != nil && o.MaximumInterval != nil {
		return true
	}

	return false
}

// SetMaximumInterval gets a reference to the given float32 and assigns it to the MaximumInterval field.
func (o *RetryPolicy) SetMaximumInterval(v float32) {
	o.MaximumInterval = &v
}

// GetMaximumAttempts returns the MaximumAttempts field value if set, zero value otherwise.
func (o *RetryPolicy) GetMaximumAttempts() int32 {
	if o == nil || o.MaximumAttempts == nil {
		var ret int32
		return ret
	}
	return *o.MaximumAttempts
}

// GetMaximumAttemptsOk returns a tuple with the MaximumAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetMaximumAttemptsOk() (*int32, bool) {
	if o == nil || o.MaximumAttempts == nil {
		return nil, false
	}
	return o.MaximumAttempts, true
}

// HasMaximumAttempts returns a boolean if a field has been set.
func (o *RetryPolicy) HasMaximumAttempts() bool {
	if o != nil && o.MaximumAttempts != nil {
		return true
	}

	return false
}

// SetMaximumAttempts gets a reference to the given int32 and assigns it to the MaximumAttempts field.
func (o *RetryPolicy) SetMaximumAttempts(v int32) {
	o.MaximumAttempts = &v
}

func (o RetryPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InitialInterval != nil {
		toSerialize["initialInterval"] = o.InitialInterval
	}
	if o.BackoffCoefficient != nil {
		toSerialize["backoffCoefficient"] = o.BackoffCoefficient
	}
	if o.MaximumInterval != nil {
		toSerialize["maximumInterval"] = o.MaximumInterval
	}
	if o.MaximumAttempts != nil {
		toSerialize["maximumAttempts"] = o.MaximumAttempts
	}
	return json.Marshal(toSerialize)
}

type NullableRetryPolicy struct {
	value *RetryPolicy
	isSet bool
}

func (v NullableRetryPolicy) Get() *RetryPolicy {
	return v.value
}

func (v *NullableRetryPolicy) Set(val *RetryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableRetryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableRetryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetryPolicy(val *RetryPolicy) *NullableRetryPolicy {
	return &NullableRetryPolicy{value: val, isSet: true}
}

func (v NullableRetryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


